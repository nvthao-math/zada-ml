/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import com.bake.time.EUtils;
import com.bake.time.TimeUtils;
import com.test.Test;
import com.zada.data.type.TType;
import com.zada.data.type.TimeSeries;
import java.io.UnsupportedEncodingException;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.HashMap;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 *
 * @author bigdata
 */
public class TestTimeSeries {

    public static void main(String[] args) throws Exception {
        Map<Long, Double> data = getData();
        TimeSeries ts = new TimeSeries(data);
        Map<Long, Number> partitioned = ts.getPartitionedData(TType.WEEKLY, 1523466000000l);
        for (Long time : partitioned.keySet()) {
            String info = String.format("%s  -  %s  -  %s", TimeUtils.formatLongAsString(time, "yyyy-MM-dd"), TimeUtils.getDay(time), partitioned.get(time));
            System.out.println(info);
        }
        System.out.println(EUtils.toJson(ts.getPartitionedData()));
    }

    public static Map<Long, Double> getData() throws UnsupportedEncodingException, Exception {
        // confirm
        Map<Long, Double> data = new HashMap<>();
        String line = "[[1507914000000,2170.0],[1508000400000,2170.0],[1508086800000,2170.0],[1508173200000,2170.0],[1508259600000,2170.0],[1508346000000,2170.0],[1508432400000,2170.0],[1508518800000,2170.0],[1508605200000,2170.0],[1508691600000,2170.0],[1508778000000,2170.0],[1508864400000,2170.0],[1508950800000,2170.0],[1509037200000,2170.0],[1509123600000,2170.0],[1509210000000,2170.0],[1509296400000,2170.0],[1509382800000,2170.0],[1509469200000,2170.0],[1509555600000,2170.0],[1509642000000,2170.0],[1509728400000,2170.0],[1509814800000,2170.0],[1509901200000,2170.0],[1509987600000,2170.0],[1510074000000,2170.0],[1510160400000,2170.0],[1510246800000,2170.0],[1510333200000,2170.0],[1510419600000,2170.0],[1510506000000,2170.0],[1510592400000,2170.0],[1510678800000,2170.0],[1510765200000,2170.0],[1510851600000,2170.0],[1510938000000,2170.0],[1511024400000,2170.0],[1511110800000,2170.0],[1511197200000,2170.0],[1511283600000,2170.0],[1511370000000,2170.0],[1511456400000,2170.0],[1511542800000,2170.0],[1511629200000,2170.0],[1511715600000,2170.0],[1511802000000,2170.0],[1511888400000,2170.0],[1511974800000,2170.0],[1512061200000,2170.0],[1512147600000,2170.0],[1512234000000,2170.0],[1512320400000,2170.0],[1512406800000,2170.0],[1512493200000,2170.0],[1512579600000,2170.0],[1512666000000,2170.0],[1512752400000,2170.0],[1512838800000,2170.0],[1512925200000,2170.0],[1513011600000,2170.0],[1513098000000,2170.0],[1513184400000,2170.0],[1513270800000,2170.0],[1513357200000,2170.0],[1513443600000,2170.0],[1513530000000,2170.0],[1513616400000,2170.0],[1513702800000,2170.0],[1513789200000,2170.0],[1513875600000,2170.0],[1513962000000,2170.0],[1514048400000,2170.0],[1514134800000,2170.0],[1514221200000,2170.0],[1514307600000,2170.0],[1514394000000,2170.0],[1514480400000,2170.0],[1514566800000,2170.0],[1514653200000,2170.0],[1514739600000,2170.0],[1514826000000,2170.0],[1514912400000,2170.0],[1514998800000,2170.0],[1515085200000,2170.0],[1515171600000,2170.0],[1515258000000,2170.0],[1515344400000,2170.0],[1515430800000,2170.0],[1515517200000,2170.0],[1515603600000,2170.0],[1515690000000,2170.0],[1515776400000,2170.0],[1515862800000,2170.0],[1515949200000,2170.0],[1516035600000,2170.0],[1516122000000,2170.0],[1516208400000,2170.0],[1516294800000,2170.0],[1516381200000,2170.0],[1516467600000,2170.0],[1516554000000,2170.0],[1516640400000,2170.0],[1516726800000,2170.0],[1516813200000,2170.0],[1516899600000,2170.0],[1516986000000,2170.0],[1517072400000,2170.0],[1517158800000,2170.0],[1517245200000,2170.0],[1517331600000,2170.0],[1517418000000,2170.0],[1517504400000,2170.0],[1517590800000,2170.0],[1517677200000,2170.0],[1517763600000,2170.0],[1517850000000,2170.0],[1517936400000,2170.0],[1518022800000,2170.0],[1518109200000,2170.0],[1518195600000,2170.0],[1518282000000,2170.0],[1518368400000,2170.0],[1518454800000,2170.0],[1518541200000,2170.0],[1518627600000,2170.0],[1518714000000,2170.0],[1518800400000,2170.0],[1518886800000,2170.0],[1518973200000,2170.0],[1519059600000,2170.0],[1519146000000,2170.0],[1519232400000,2170.0],[1519318800000,2170.0],[1519405200000,2170.0],[1519491600000,2170.0],[1519578000000,2170.0],[1519664400000,2170.0],[1519750800000,2170.0],[1519837200000,2170.0],[1519923600000,2170.0],[1520010000000,2170.0],[1520096400000,2170.0],[1520182800000,2170.0],[1520269200000,2170.0],[1520355600000,2170.0],[1520442000000,2170.0],[1520528400000,2170.0],[1520614800000,2170.0],[1520701200000,2170.0],[1520787600000,2170.0],[1520874000000,2170.0],[1520960400000,2170.0],[1521046800000,2170.0],[1521133200000,2170.0],[1521219600000,2170.0],[1521306000000,2170.0],[1521392400000,2170.0],[1521478800000,2170.0],[1521565200000,2170.0],[1521651600000,2170.0],[1521738000000,2170.0],[1521824400000,2170.0],[1521910800000,2170.0],[1521997200000,2170.0],[1522083600000,2170.0],[1522170000000,2170.0],[1522256400000,2170.0],[1522342800000,2170.0],[1522429200000,2170.0],[1522515600000,2170.0],[1522602000000,2170.0],[1522688400000,2170.0],[1522774800000,2170.0],[1522861200000,2170.0],[1522947600000,2170.0],[1523034000000,2170.0],[1523120400000,2170.0],[1523206800000,2170.0],[1523293200000,2172.0],[1523379600000,2172.0],[1523466000000,2172.0]]";
        //
        String pattern = "\\d+,\\d+.\\w+"; // stats
        Pattern r = Pattern.compile(pattern);
        Matcher m = r.matcher(line);
        while (m.find()) {
            String inf = m.group();
            String[] parts = inf.split(",");
            long time = Long.parseLong(parts[0]);
            double dtmp = Double.parseDouble(parts[1]);
            NumberFormat formatter = new DecimalFormat("#.#");
            String fx = formatter.format(dtmp);
            Double val = Double.parseDouble(fx);
            data.put(time, val);
        }
        System.out.println(data.size());
        return data;
    }

}
